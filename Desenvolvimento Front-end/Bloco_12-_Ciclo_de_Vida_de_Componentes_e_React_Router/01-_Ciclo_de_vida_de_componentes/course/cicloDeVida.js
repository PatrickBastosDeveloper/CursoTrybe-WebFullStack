// As fun√ß√µes de ciclo de vida do componente v√™m para nos dar o controle necess√°rio para utilizar cada recurso no momento certo e para garantir que a assincronicidade do React n√£o prejudique a l√≥gica do que voc√™ est√° tentando executar. Seja para a chamada de uma API , seja para atualiza√ß√£o de algum elemento gr√°fico, √© fundamental respeitar o momento em que seu componente se encontra.

// existem fun√ß√µes espec√≠ficas que s√£o executadas ao final de cada fase do ciclo de vida de um componente: componentDidMount , componentDidUpdate e componentWillUnmount.

// Os componentes React , assim como os seres vivos, possuem um ciclo de vida. No caso do React, o ciclo √© dividido em 3 etapas. S√£o elas:
// Montagem - quando o componente √© inicializado e inserido no DOM;
// Atualiza√ß√£o - quando os props ou estados do componente s√£o alterados;
// Desmontagem - quando o componente morre üßü‚Äç‚ôÇÔ∏è, sumindo do DOM.

// Imagem que demonstra o ciclo de vida de um componente.;
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/  

// O ciclo de vida e os principais m√©todos funcionam da seguinte maneira:
// Montagem:
// constructor - recebe as props e define o estado;
// render - renderiza o componente, inserindo-o no DOM;
// componentDidMount - dispara uma ou mais a√ß√µes ap√≥s o componente ser inserido no DOM (ideal para requisi√ß√µes) ;
// Atualiza√ß√£o:
// shouldComponentUpdate - possibilita autorizar ou n√£o o componente a atualizar;
// componentDidUpdate - dispara uma ou mais a√ß√µes ap√≥s o componente ser atualizado;
// Desmontagem:
// componentWillUnmount - dispara uma ou mais a√ß√µes antes de o componente ser desmontado.

// V√≠deo instrutivo:
// https://www.youtube.com/watch?v=m_mtV4YaI8c

